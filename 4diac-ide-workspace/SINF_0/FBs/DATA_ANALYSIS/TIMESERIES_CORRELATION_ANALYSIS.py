import json
import pandas as pd
import numpy as np

""" 
This block takes a two timeseries from MEASUREMENTS_TO_JSON_TIMESERIES block and calculates
its correlation.

To run this block in a Raspberry Pi 3 you may need to install the following dependencies:
sudo apt-get install python-dev libatlas-base-dev
"""	

class TIMESERIES_CORRELATION_ANALYSIS:

    def __init__(self):
        self.timeseries_1 = [1.526829,1.713672,1.706345,1.788166,1.635516,1.675815,1.183672,1.766184,1.777175,1.685585,1.733212,1.717336,1.495078,1.705124,1.3754,1.722221,1.758857,1.238626,1.337543,1.376621,1.727106,1.626967,1.674594,1.615976,1.697797,1.738096,1.721,1.55858,1.184893,1.448672,1.477981,1.688027,1.148257,1.724663,1.635516,1.805262,1.653834,1.707566,1.714894,1.613534,1.747866,1.652612,1.624525,1.193441,1.294801,1.653834,1.837014,1.749087,1.700239,1.285031,1.681921,1.664824,1.623304,1.292358,1.234962,1.832129,1.648949,1.735654,1.767405,1.736875,1.819917,1.364409,1.604986,1.226414,1.789387,1.753972,1.592774,1.285031,1.708788,1.633073,1.752751,1.752751,1.270377,1.784502,1.592774,1.742981,1.75153,1.789387,1.860216,1.684364,1.515838,1.6807,1.663603,1.688027,1.459663,1.394939,1.722221,1.320446,1.622082,1.832129,1.615976,1.652612,1.614755,1.65994,1.858995,1.368073,1.742981,1.75153,1.727106,1.811368,1.746645,1.67093,1.722221,1.492635,1.583004,1.58911,1.734433,1.342428,1.608649,1.699018,1.622082,1.81259,1.694133,1.917613,1.721,1.655055,1.688027,1.768626,1.790608,1.635516,1.678258,1.839456,1.692912,1.742981,1.25328,1.850447,1.530492,1.653834,1.811368,1.50729,1.409594,1.663603,1.267934,1.75153,1.735654,1.730769,1.721,1.719778,1.347312,1.746645,1.172681,1.328994,1.612313,1.178787,1.77229,1.78206,1.62941,1.637958,1.722221,1.827244,1.76252,1.713672,1.729548,1.775954,1.717336,1.74176,1.740539,1.683142,1.752751,1.887083,1.607428,1.658718,1.681921,1.724663,1.65994,1.700239,1.397382,1.234962,1.22275,1.252059,1.695354,1.85411,1.664824,1.778396,1.67093,1.697797,1.305792,1.810147,1.785723,1.490193,1.739318,1.745424,1.818696]
        self.timeseries_2 = [1.623304,1.526829,1.713672,1.706345,1.788166,1.635516,1.675815,1.183672,1.766184,1.777175,1.685585,1.733212,1.717336,1.495078,1.705124,1.3754,1.722221,1.758857,1.238626,1.337543,1.376621,1.727106,1.626967,1.674594,1.615976,1.697797,1.738096,1.721,1.55858,1.184893,1.448672,1.477981,1.688027,1.148257,1.724663,1.635516,1.805262,1.653834,1.707566,1.714894,1.613534,1.747866,1.652612,1.624525,1.193441,1.294801,1.653834,1.837014,1.749087,1.700239,1.285031,1.681921,1.664824,1.623304,1.292358,1.234962,1.832129,1.648949,1.735654,1.767405,1.736875,1.819917,1.364409,1.604986,1.226414,1.789387,1.753972,1.592774,1.285031,1.708788,1.633073,1.752751,1.752751,1.270377,1.784502,1.592774,1.742981,1.75153,1.789387,1.860216,1.684364,1.515838,1.6807,1.663603,1.688027,1.459663,1.394939,1.722221,1.320446,1.622082,1.832129,1.615976,1.652612,1.614755,1.65994,1.858995,1.368073,1.742981,1.75153,1.727106,1.811368,1.746645,1.67093,1.722221,1.492635,1.583004,1.58911,1.734433,1.342428,1.608649,1.699018,1.622082,1.81259,1.694133,1.917613,1.721,1.655055,1.688027,1.768626,1.790608,1.635516,1.678258,1.839456,1.692912,1.742981,1.25328,1.850447,1.530492,1.653834,1.7365257,1.823351985,1.914519584,2.010245563,2.110757842,2.216295734,2.32711052,2.443466046,2.565639349,2.693921316,2.828617382,2.970048251,3.118550664,3.274478197,3.438202107,3.610112212,3.790617823,3.980148714,4.179156149,4.388113957,4.607519655,4.837895637,5.079790419,5.33377994,5.600468937,5.880492384,6.174517003,6.483242854,6.807404996,7.147775246,7.505164008,7.880422209,8.274443319,8.688165485,9.122573759,9.578702447,10.05763757,10.56051945,11.08854542,11.64297269,12.22512133,12.83637739,13.47819626,14.15210608,14.85971138,15.60269695,16.3828318,17.20197339,18.06207205,18.96517566,19.91343444,20.90910616,21.95456147,23.05228954,24.20490402]
        self.timeseries_3 = [1.623304,1.526829,1.713672,1.706345,1.788166,1.635516,1.675815,1.183672,1.766184,1.777175,1.685585,1.733212,1.717336,1.495078,1.705124,1.3754,1.722221,1.758857,1.238626,1.337543,1.376621,1.727106,1.626967,1.674594,1.615976,1.697797,1.738096,1.721,1.55858,1.184893,1.448672,1.477981,1.688027,1.148257,1.724663,1.635516,1.805262,1.653834,1.707566,1.714894,1.613534,1.747866,1.652612,1.624525,1.193441,1.294801,1.653834,1.837014,1.749087,1.700239,1.285031,1.681921,1.664824,1.623304,1.292358,1.234962,1.832129,1.648949,1.735654,1.767405,1.736875,1.819917,1.364409,1.604986,1.226414,1.789387,1.753972,1.592774,1.285031,1.708788,1.633073,1.752751,1.752751,1.270377,1.784502,1.592774,1.742981,1.75153,1.789387,1.860216,1.684364,1.515838,1.6807,1.663603,1.688027,1.459663,1.394939,1.722221,1.320446,1.622082,1.832129,1.615976,1.652612,1.614755,1.65994,1.858995,1.368073,1.742981,1.75153,1.727106,1.811368,1.746645,1.67093,1.722221,1.492635,1.583004,1.58911,1.734433,1.342428,1.608649,1.699018,1.622082,1.81259,1.694133,1.917613,1.721,1.655055,1.688027,1.768626,1.790608,1.635516,1.678258,1.839456,1.692912,1.742981,1.25328,1.850447,1.530492,1.653834,1.811368,1.50729,1.409594,1.663603,1.267934,1.75153,1.735654,1.730769,1.721,1.719778,1.347312,1.746645,1.172681,1.328994,1.612313,1.178787,1.77229,1.78206,1.62941,1.637958,1.722221,1.827244,1.76252,1.713672,1.729548,1.775954,1.717336,1.727336,1.737336,1.747336,1.757336,1.767336,1.777336,1.787336,1.797336,1.807336,1.817336,1.827336,1.837336,1.847336,1.857336,1.867336,1.877336,1.887336,1.897336,1.907336,1.917336,1.927336,1.937336,1.947336,1.957336,1.967336,1.977336,1.987336,1.997336]
        
    def schedule(self, event_name, event_value,
                 TIMESERIES_1, TIMESERIES_2, RESULT):

        if event_name == 'INIT':
            self.sensor_id = int(SENSOR_ID)
            self.frequency_step_units = FREQUENCY_STEP_UNITS

            return [event_name, 
                event_value,
                None,
                None,
                None,
                None]


        elif event_name == 'RUN':
            string_list = np.array(MEASUREMENTS.split(";"))
            floats_list = string_list.astype(float)
            sensor_measurements = [(self.sensor_id,MEASUREMENTS[x]) for x in range(len(floats_list))]
            timeseries = pd.DataFrame(sensor_measurements, columns=["measurement","sensor"], index=pd.date_range(INITIAL_TIMESTAMP, periods=len(floats_list), freq="L"))
            result = timeseries.to_json(orient="split", date_format="iso", date_unit="us")
            print(result)
            return [event_value, 
                self.sensor_id ,
                MEASUREMENTS,
                INITIAL_TIMESTAMP,
                self.frequency_step_units,
                result]


data = """{
    "columns": ["sensor","measurement"],
    "index": ["2017-01-01T12:00:00.000000Z","2017-01-01T12:00:00.300000Z","2017-01-01T12:00:00.000000Z","2017-01-01T12:00:00.300000Z"],
    "data":[[3,1.023],[3,2.045],[3,3.01],[3,4.03]]
}"""

dfa = pd.read_json(data, orient="split", precise_float=True)
timestamps = np.array2string(dfa.index.values, separator=',')
meeasurements = np.array2string(dfa["measurement"].to_numpy(), precision=4, separator=',', suppress_small=True)
query = """INSERT INTO {0} VALUES (1, unnest(array{1}), unnest(array{2}::timestamp[]));""".format("reference_measurements",meeasurements,timestamps)
print(dfa["sensor"][0])
#analysis = TIMESERIES_CORRELATION_ANALYSIS()
#df = pd.DataFrame({'Good': analysis.timeseries_1, 'Bad' : analysis.timeseries_3})
#print(df['Good'].corr(df['Bad']))
